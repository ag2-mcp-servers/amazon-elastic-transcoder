# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:20:00+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, constr


class AccessControl(
    RootModel[constr(pattern=r'(^FullControl$)|(^Read$)|(^ReadAcp$)|(^WriteAcp$)')]
):
    root: constr(pattern=r'(^FullControl$)|(^Read$)|(^ReadAcp$)|(^WriteAcp$)')


class AccessControls(RootModel[List[AccessControl]]):
    root: List[AccessControl] = Field(..., max_length=30)


class AccessDeniedException(RootModel[Any]):
    root: Any


class Ascending(RootModel[constr(pattern=r'(^true$)|(^false$)')]):
    root: constr(pattern=r'(^true$)|(^false$)')


class AspectRatio(
    RootModel[constr(pattern=r'(^auto$)|(^1:1$)|(^4:3$)|(^3:2$)|(^16:9$)')]
):
    root: constr(pattern=r'(^auto$)|(^1:1$)|(^4:3$)|(^3:2$)|(^16:9$)')


class AudioBitDepth(RootModel[constr(pattern=r'(^8$)|(^16$)|(^24$)|(^32$)')]):
    root: constr(pattern=r'(^8$)|(^16$)|(^24$)|(^32$)')


class AudioBitOrder(RootModel[constr(pattern=r'(^LittleEndian$)')]):
    root: constr(pattern=r'(^LittleEndian$)')


class AudioBitRate(RootModel[constr(pattern=r'^\d{1,3}$')]):
    root: constr(pattern=r'^\d{1,3}$')


class AudioChannels(RootModel[constr(pattern=r'(^auto$)|(^0$)|(^1$)|(^2$)')]):
    root: constr(pattern=r'(^auto$)|(^0$)|(^1$)|(^2$)')


class AudioCodec(
    RootModel[constr(pattern=r'(^AAC$)|(^vorbis$)|(^mp3$)|(^mp2$)|(^pcm$)|(^flac$)')]
):
    root: constr(pattern=r'(^AAC$)|(^vorbis$)|(^mp3$)|(^mp2$)|(^pcm$)|(^flac$)')


class AudioCodecProfile(
    RootModel[constr(pattern=r'(^auto$)|(^AAC-LC$)|(^HE-AAC$)|(^HE-AACv2$)')]
):
    root: constr(pattern=r'(^auto$)|(^AAC-LC$)|(^HE-AAC$)|(^HE-AACv2$)')


class AudioPackingMode(
    RootModel[
        constr(
            pattern=r'(^SingleTrack$)|(^OneChannelPerTrack$)|(^OneChannelPerTrackWithMosTo8Tracks$)'
        )
    ]
):
    root: constr(
        pattern=r'(^SingleTrack$)|(^OneChannelPerTrack$)|(^OneChannelPerTrackWithMosTo8Tracks$)'
    )


class AudioSampleRate(
    RootModel[
        constr(
            pattern=r'(^auto$)|(^22050$)|(^32000$)|(^44100$)|(^48000$)|(^96000$)|(^192000$)'
        )
    ]
):
    root: constr(
        pattern=r'(^auto$)|(^22050$)|(^32000$)|(^44100$)|(^48000$)|(^96000$)|(^192000$)'
    )


class AudioSigned(RootModel[constr(pattern=r'(^Unsigned$)|(^Signed$)')]):
    root: constr(pattern=r'(^Unsigned$)|(^Signed$)')


class Base64EncodedString(
    RootModel[
        constr(
            pattern=r'^$|(^(?:[A-Za-z0-9\+/]{4})*(?:[A-Za-z0-9\+/]{2}==|[A-Za-z0-9\+/]{3}=)?$)'
        )
    ]
):
    root: constr(
        pattern=r'^$|(^(?:[A-Za-z0-9\+/]{4})*(?:[A-Za-z0-9\+/]{2}==|[A-Za-z0-9\+/]{3}=)?$)'
    )


class BucketName(RootModel[constr(pattern=r'^(\w|\.|-){1,255}$')]):
    root: constr(pattern=r'^(\w|\.|-){1,255}$')


class CancelJobRequest(BaseModel):
    pass


class CancelJobResponse(BaseModel):
    pass


class CaptionFormatFormat(
    RootModel[
        constr(pattern=r'(^mov-text$)|(^srt$)|(^scc$)|(^webvtt$)|(^dfxp$)|(^cea-708$)')
    ]
):
    root: constr(
        pattern=r'(^mov-text$)|(^srt$)|(^scc$)|(^webvtt$)|(^dfxp$)|(^cea-708$)'
    )


class CaptionFormatPattern(RootModel[constr(pattern=r'(^$)|(^.*\{language\}.*$)')]):
    root: constr(pattern=r'(^$)|(^.*\{language\}.*$)')


class CaptionMergePolicy(
    RootModel[constr(pattern=r'(^MergeOverride$)|(^MergeRetain$)|(^Override$)')]
):
    root: constr(pattern=r'(^MergeOverride$)|(^MergeRetain$)|(^Override$)')


class CodecOption(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class CodecOptions(RootModel[Optional[Dict[str, CodecOption]]]):
    root: Optional[Dict[str, CodecOption]] = None


class DeletePipelineRequest(BaseModel):
    pass


class DeletePipelineResponse(BaseModel):
    pass


class DeletePresetRequest(BaseModel):
    pass


class DeletePresetResponse(BaseModel):
    pass


class Description(RootModel[constr(min_length=0, max_length=255)]):
    root: constr(min_length=0, max_length=255)


class Digits(RootModel[constr(pattern=r'^\d{1,5}$')]):
    root: constr(pattern=r'^\d{1,5}$')


class DigitsOrAuto(RootModel[constr(pattern=r'(^auto$)|(^\d{2,4}$)')]):
    root: constr(pattern=r'(^auto$)|(^\d{2,4}$)')


class EncryptionMode(
    RootModel[
        constr(
            pattern=r'(^s3$)|(^s3-aws-kms$)|(^aes-cbc-pkcs7$)|(^aes-ctr$)|(^aes-gcm$)'
        )
    ]
):
    root: constr(
        pattern=r'(^s3$)|(^s3-aws-kms$)|(^aes-cbc-pkcs7$)|(^aes-ctr$)|(^aes-gcm$)'
    )


class Filename(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class FixedGOP(RootModel[constr(pattern=r'(^true$)|(^false$)')]):
    root: constr(pattern=r'(^true$)|(^false$)')


class FloatString(RootModel[constr(pattern=r'^\d{1,5}(\.\d{0,5})?$')]):
    root: constr(pattern=r'^\d{1,5}(\.\d{0,5})?$')


class FrameRate(
    RootModel[
        constr(
            pattern=r'(^auto$)|(^10$)|(^15$)|(^23.97$)|(^24$)|(^25$)|(^29.97$)|(^30$)|(^50$)|(^60$)'
        )
    ]
):
    root: constr(
        pattern=r'(^auto$)|(^10$)|(^15$)|(^23.97$)|(^24$)|(^25$)|(^29.97$)|(^30$)|(^50$)|(^60$)'
    )


class Grantee(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class GranteeType(RootModel[constr(pattern=r'(^Canonical$)|(^Email$)|(^Group$)')]):
    root: constr(pattern=r'(^Canonical$)|(^Email$)|(^Group$)')


class HlsContentProtectionMethod(RootModel[constr(pattern=r'(^aes-128$)')]):
    root: constr(pattern=r'(^aes-128$)')


class HorizontalAlign(RootModel[constr(pattern=r'(^Left$)|(^Right$)|(^Center$)')]):
    root: constr(pattern=r'(^Left$)|(^Right$)|(^Center$)')


class Id(RootModel[constr(pattern=r'^\d{13}-\w{6}$')]):
    root: constr(pattern=r'^\d{13}-\w{6}$')


class IncompatibleVersionException(RootModel[Any]):
    root: Any


class Interlaced(RootModel[constr(pattern=r'(^auto$)|(^true$)|(^false$)')]):
    root: constr(pattern=r'(^auto$)|(^true$)|(^false$)')


class InternalServiceException(RootModel[Any]):
    root: Any


class JobContainer(
    RootModel[
        constr(
            pattern=r'(^auto$)|(^3gp$)|(^asf$)|(^avi$)|(^divx$)|(^flv$)|(^mkv$)|(^mov$)|(^mp4$)|(^mpeg$)|(^mpeg-ps$)|(^mpeg-ts$)|(^mxf$)|(^ogg$)|(^ts$)|(^vob$)|(^wav$)|(^webm$)|(^mp3$)|(^m4a$)|(^aac$)'
        )
    ]
):
    root: constr(
        pattern=r'(^auto$)|(^3gp$)|(^asf$)|(^avi$)|(^divx$)|(^flv$)|(^mkv$)|(^mov$)|(^mp4$)|(^mpeg$)|(^mpeg-ps$)|(^mpeg-ts$)|(^mxf$)|(^ogg$)|(^ts$)|(^vob$)|(^wav$)|(^webm$)|(^mp3$)|(^m4a$)|(^aac$)'
    )


class JobStatus(
    RootModel[
        constr(
            pattern=r'(^Submitted$)|(^Progressing$)|(^Complete$)|(^Canceled$)|(^Error$)'
        )
    ]
):
    root: constr(
        pattern=r'(^Submitted$)|(^Progressing$)|(^Complete$)|(^Canceled$)|(^Error$)'
    )


class JpgOrPng(RootModel[constr(pattern=r'(^jpg$)|(^png$)')]):
    root: constr(pattern=r'(^jpg$)|(^png$)')


class Key(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class KeyArn(RootModel[constr(min_length=0, max_length=255)]):
    root: constr(min_length=0, max_length=255)


class KeyIdGuid(
    RootModel[
        constr(
            pattern=r'(^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}$)|(^[0-9A-Fa-f]{32}$)'
        )
    ]
):
    root: constr(
        pattern=r'(^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}$)|(^[0-9A-Fa-f]{32}$)'
    )


class KeyStoragePolicy(
    RootModel[constr(pattern=r'(^NoStore$)|(^WithVariantPlaylists$)')]
):
    root: constr(pattern=r'(^NoStore$)|(^WithVariantPlaylists$)')


class KeyframesMaxDist(RootModel[constr(pattern=r'^\d{1,6}$')]):
    root: constr(pattern=r'^\d{1,6}$')


class LimitExceededException(RootModel[Any]):
    root: Any


class ListJobsByPipelineRequest(BaseModel):
    pass


class ListJobsByStatusRequest(BaseModel):
    pass


class ListPipelinesRequest(BaseModel):
    pass


class ListPresetsRequest(BaseModel):
    pass


class LongKey(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class MaxFrameRate(
    RootModel[
        constr(
            pattern=r'(^10$)|(^15$)|(^23.97$)|(^24$)|(^25$)|(^29.97$)|(^30$)|(^50$)|(^60$)'
        )
    ]
):
    root: constr(
        pattern=r'(^10$)|(^15$)|(^23.97$)|(^24$)|(^25$)|(^29.97$)|(^30$)|(^50$)|(^60$)'
    )


class MergePolicy(
    RootModel[constr(pattern=r'(^Replace$)|(^Prepend$)|(^Append$)|(^Fallback$)')]
):
    root: constr(pattern=r'(^Replace$)|(^Prepend$)|(^Append$)|(^Fallback$)')


class Name(RootModel[constr(min_length=1, max_length=40)]):
    root: constr(min_length=1, max_length=40)


class NonEmptyBase64EncodedString(
    RootModel[
        constr(
            pattern=r'(^(?:[A-Za-z0-9\+/]{4})*(?:[A-Za-z0-9\+/]{2}==|[A-Za-z0-9\+/]{3}=)?$)'
        )
    ]
):
    root: constr(
        pattern=r'(^(?:[A-Za-z0-9\+/]{4})*(?:[A-Za-z0-9\+/]{2}==|[A-Za-z0-9\+/]{3}=)?$)'
    )


class NullableInteger(RootModel[int]):
    root: int


class NullableLong(RootModel[int]):
    root: int


class OneTo512String(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class Opacity(RootModel[constr(pattern=r'^\d{1,3}(\.\d{0,20})?$')]):
    root: constr(pattern=r'^\d{1,3}(\.\d{0,20})?$')


class OutputKeys(RootModel[List[Key]]):
    root: List[Key] = Field(..., max_length=30)


class PaddingPolicy(RootModel[constr(pattern=r'(^Pad$)|(^NoPad$)')]):
    root: constr(pattern=r'(^Pad$)|(^NoPad$)')


class Permission(BaseModel):
    Access: Optional[AccessControls] = None
    Grantee_1: Optional[Grantee] = Field(None, alias='Grantee')
    GranteeType_1: Optional[GranteeType] = Field(None, alias='GranteeType')


class Permissions(RootModel[List[Permission]]):
    root: List[Permission] = Field(..., max_length=30)


class PipelineStatus(RootModel[constr(pattern=r'(^Active$)|(^Paused$)')]):
    root: constr(pattern=r'(^Active$)|(^Paused$)')


class PixelsOrPercent(
    RootModel[constr(pattern=r'(^\d{1,3}(\.\d{0,5})?%$)|(^\d{1,4}?px$)')]
):
    root: constr(pattern=r'(^\d{1,3}(\.\d{0,5})?%$)|(^\d{1,4}?px$)')


class PlayReadyDrmFormatString(
    RootModel[constr(pattern=r'(^microsoft$)|(^discretix-3.0$)')]
):
    root: constr(pattern=r'(^microsoft$)|(^discretix-3.0$)')


class PlaylistFormat(
    RootModel[constr(pattern=r'(^HLSv3$)|(^HLSv4$)|(^Smooth$)|(^MPEG-DASH$)')]
):
    root: constr(pattern=r'(^HLSv3$)|(^HLSv4$)|(^Smooth$)|(^MPEG-DASH$)')


class PresetContainer(
    RootModel[
        constr(
            pattern=r'(^mp4$)|(^ts$)|(^webm$)|(^mp3$)|(^flac$)|(^oga$)|(^ogg$)|(^fmp4$)|(^mpg$)|(^flv$)|(^gif$)|(^mxf$)|(^wav$)|(^mp2$)'
        )
    ]
):
    root: constr(
        pattern=r'(^mp4$)|(^ts$)|(^webm$)|(^mp3$)|(^flac$)|(^oga$)|(^ogg$)|(^fmp4$)|(^mpg$)|(^flv$)|(^gif$)|(^mxf$)|(^wav$)|(^mp2$)'
    )


class PresetType(RootModel[constr(pattern=r'(^System$)|(^Custom$)')]):
    root: constr(pattern=r'(^System$)|(^Custom$)')


class PresetWatermarkId(RootModel[constr(min_length=1, max_length=40)]):
    root: constr(min_length=1, max_length=40)


class ReadJobRequest(BaseModel):
    pass


class ReadPipelineRequest(BaseModel):
    pass


class ReadPresetRequest(BaseModel):
    pass


class Resolution(RootModel[constr(pattern=r'(^auto$)|(^\d{1,5}x\d{1,5}$)')]):
    root: constr(pattern=r'(^auto$)|(^\d{1,5}x\d{1,5}$)')


class ResourceInUseException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class Role(RootModel[constr(pattern=r'^arn:aws:iam::\w{12}:role/.+$')]):
    root: constr(pattern=r'^arn:aws:iam::\w{12}:role/.+$')


class Rotate(RootModel[constr(pattern=r'(^auto$)|(^0$)|(^90$)|(^180$)|(^270$)')]):
    root: constr(pattern=r'(^auto$)|(^0$)|(^90$)|(^180$)|(^270$)')


class SizingPolicy(
    RootModel[
        constr(
            pattern=r'(^Fit$)|(^Fill$)|(^Stretch$)|(^Keep$)|(^ShrinkToFit$)|(^ShrinkToFill$)'
        )
    ]
):
    root: constr(
        pattern=r'(^Fit$)|(^Fill$)|(^Stretch$)|(^Keep$)|(^ShrinkToFit$)|(^ShrinkToFill$)'
    )


class SnsTopic(RootModel[constr(pattern=r'(^$)|(^arn:aws:sns:.*:\w{12}:.+$)')]):
    root: constr(pattern=r'(^$)|(^arn:aws:sns:.*:\w{12}:.+$)')


class SnsTopics(RootModel[List[SnsTopic]]):
    root: List[SnsTopic] = Field(..., max_length=30)


class StorageClass(RootModel[constr(pattern=r'(^ReducedRedundancy$)|(^Standard$)')]):
    root: constr(pattern=r'(^ReducedRedundancy$)|(^Standard$)')


class String(RootModel[str]):
    root: str


class Success(RootModel[constr(pattern=r'(^true$)|(^false$)')]):
    root: constr(pattern=r'(^true$)|(^false$)')


class Target(RootModel[constr(pattern=r'(^Content$)|(^Frame$)')]):
    root: constr(pattern=r'(^Content$)|(^Frame$)')


class TestRoleRequest(BaseModel):
    InputBucket: BucketName
    OutputBucket: BucketName
    Role_1: Role = Field(..., alias='Role')
    Topics: SnsTopics


class ThumbnailPattern(RootModel[constr(pattern=r'(^$)|(^.*\{count\}.*$)')]):
    root: constr(pattern=r'(^$)|(^.*\{count\}.*$)')


class ThumbnailResolution(RootModel[constr(pattern=r'^\d{1,5}x\d{1,5}$')]):
    root: constr(pattern=r'^\d{1,5}x\d{1,5}$')


class Thumbnails(BaseModel):
    AspectRatio_1: Optional[AspectRatio] = Field(None, alias='AspectRatio')
    Format: Optional[JpgOrPng] = None
    Interval: Optional[Digits] = None
    MaxHeight: Optional[DigitsOrAuto] = None
    MaxWidth: Optional[DigitsOrAuto] = None
    PaddingPolicy_1: Optional[PaddingPolicy] = Field(None, alias='PaddingPolicy')
    Resolution: Optional[ThumbnailResolution] = None
    SizingPolicy_1: Optional[SizingPolicy] = Field(None, alias='SizingPolicy')


class Time(
    RootModel[
        constr(
            pattern=r'(^\d{1,5}(\.\d{0,3})?$)|(^([0-1]?[0-9]:|2[0-3]:)?([0-5]?[0-9]:)?[0-5]?[0-9](\.\d{0,3})?$)'
        )
    ]
):
    root: constr(
        pattern=r'(^\d{1,5}(\.\d{0,3})?$)|(^([0-1]?[0-9]:|2[0-3]:)?([0-5]?[0-9]:)?[0-5]?[0-9](\.\d{0,3})?$)'
    )


class TimeOffset(
    RootModel[
        constr(
            pattern=r'(^[+-]?\d{1,5}(\.\d{0,3})?$)|(^[+-]?([0-1]?[0-9]:|2[0-3]:)?([0-5]?[0-9]:)?[0-5]?[0-9](\.\d{0,3})?$)'
        )
    ]
):
    root: constr(
        pattern=r'(^[+-]?\d{1,5}(\.\d{0,3})?$)|(^[+-]?([0-1]?[0-9]:|2[0-3]:)?([0-5]?[0-9]:)?[0-5]?[0-9](\.\d{0,3})?$)'
    )


class TimeSpan(BaseModel):
    Duration: Optional[Time] = None
    StartTime: Optional[Time] = None


class Timing(BaseModel):
    FinishTimeMillis: Optional[NullableLong] = None
    StartTimeMillis: Optional[NullableLong] = None
    SubmitTimeMillis: Optional[NullableLong] = None


class UpdatePipelineStatusRequest(BaseModel):
    Status: PipelineStatus


class UserMetadata(RootModel[Optional[Dict[str, String]]]):
    root: Optional[Dict[str, String]] = None


class ValidationException(RootModel[Any]):
    root: Any


class VerticalAlign(RootModel[constr(pattern=r'(^Top$)|(^Bottom$)|(^Center$)')]):
    root: constr(pattern=r'(^Top$)|(^Bottom$)|(^Center$)')


class VideoBitRate(RootModel[constr(pattern=r'(^\d{2,5}$)|(^auto$)')]):
    root: constr(pattern=r'(^\d{2,5}$)|(^auto$)')


class VideoCodec(
    RootModel[constr(pattern=r'(^H\.264$)|(^vp8$)|(^vp9$)|(^mpeg2$)|(^gif$)')]
):
    root: constr(pattern=r'(^H\.264$)|(^vp8$)|(^vp9$)|(^mpeg2$)|(^gif$)')


class Warning(BaseModel):
    Code: Optional[String] = None
    Message: Optional[String] = None


class Warnings(RootModel[List[Warning]]):
    root: List[Warning]


class WatermarkKey(
    RootModel[
        constr(
            pattern=r'(^.{1,1020}.jpg$)|(^.{1,1019}.jpeg$)|(^.{1,1020}.png$)',
            min_length=1,
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'(^.{1,1020}.jpg$)|(^.{1,1019}.jpeg$)|(^.{1,1020}.png$)',
        min_length=1,
        max_length=1024,
    )


class WatermarkSizingPolicy(
    RootModel[constr(pattern=r'(^Fit$)|(^Stretch$)|(^ShrinkToFit$)')]
):
    root: constr(pattern=r'(^Fit$)|(^Stretch$)|(^ShrinkToFit$)')


class ZeroTo255String(RootModel[constr(min_length=0, max_length=255)]):
    root: constr(min_length=0, max_length=255)


class ZeroTo512String(RootModel[constr(min_length=0, max_length=512)]):
    root: constr(min_length=0, max_length=512)


class ContentConfig(BaseModel):
    Bucket: Optional[BucketName] = None
    Permissions_1: Optional[Permissions] = Field(None, alias='Permissions')
    StorageClass_1: Optional[StorageClass] = Field(None, alias='StorageClass')


class Notifications(BaseModel):
    Completed: Optional[SnsTopic] = None
    Error: Optional[SnsTopic] = None
    Progressing: Optional[SnsTopic] = None
    Warning: Optional[SnsTopic] = None


class ThumbnailConfig(BaseModel):
    Bucket: Optional[BucketName] = None
    Permissions_1: Optional[Permissions] = Field(None, alias='Permissions')
    StorageClass_1: Optional[StorageClass] = Field(None, alias='StorageClass')


class Field20120925PipelinesPostRequest(BaseModel):
    AwsKmsKeyArn: Optional[constr(min_length=0, max_length=255)] = Field(
        None,
        description="<p>The AWS Key Management Service (AWS KMS) key that you want to use with this pipeline.</p> <p>If you use either <code>s3</code> or <code>s3-aws-kms</code> as your <code>Encryption:Mode</code>, you don't need to provide a key with your job because a default key, known as an AWS-KMS key, is created for you automatically. You need to provide an AWS-KMS key only if you want to use a non-default AWS-KMS key, or if you are using an <code>Encryption:Mode</code> of <code>aes-cbc-pkcs7</code>, <code>aes-ctr</code>, or <code>aes-gcm</code>.</p>",
    )
    ContentConfig_1: Optional[ContentConfig] = Field(
        None,
        alias='ContentConfig',
        description='The <code>PipelineOutputConfig</code> structure.',
    )
    InputBucket: constr(pattern=r'^(\w|\.|-){1,255}$') = Field(
        ...,
        description='The Amazon S3 bucket in which you saved the media files that you want to transcode.',
    )
    Name: constr(min_length=1, max_length=40) = Field(
        ...,
        description='<p>The name of the pipeline. We recommend that the name be unique within the AWS account, but uniqueness is not enforced.</p> <p>Constraints: Maximum 40 characters.</p>',
    )
    Notifications_1: Optional[Notifications] = Field(
        None,
        alias='Notifications',
        description='<p>The Amazon Simple Notification Service (Amazon SNS) topic or topics to notify in order to report job status.</p> <important> <p>To receive notifications, you must also subscribe to the new topic in the Amazon SNS console.</p> </important>',
    )
    OutputBucket: Optional[constr(pattern=r'^(\w|\.|-){1,255}$')] = Field(
        None,
        description='<p>The Amazon S3 bucket in which you want Elastic Transcoder to save the transcoded files. (Use this, or use ContentConfig:Bucket plus ThumbnailConfig:Bucket.)</p> <p>Specify this value when all of the following are true:</p> <ul> <li> <p>You want to save transcoded files, thumbnails (if any), and playlists (if any) together in one bucket.</p> </li> <li> <p>You do not want to specify the users or groups who have access to the transcoded files, thumbnails, and playlists.</p> </li> <li> <p>You do not want to specify the permissions that Elastic Transcoder grants to the files. </p> <important> <p>When Elastic Transcoder saves files in <code>OutputBucket</code>, it grants full control over the files only to the AWS account that owns the role that is specified by <code>Role</code>.</p> </important> </li> <li> <p>You want to associate the transcoded files and thumbnails with the Amazon S3 Standard storage class.</p> </li> </ul> <p>If you want to save transcoded files and playlists in one bucket and thumbnails in another bucket, specify which users can access the transcoded files or the permissions the users have, or change the Amazon S3 storage class, omit <code>OutputBucket</code> and specify values for <code>ContentConfig</code> and <code>ThumbnailConfig</code> instead.</p>',
    )
    Role: constr(pattern=r'^arn:aws:iam::\w{12}:role/.+$') = Field(
        ...,
        description='The IAM Amazon Resource Name (ARN) for the role that you want Elastic Transcoder to use to create the pipeline.',
    )
    ThumbnailConfig_1: Optional[ThumbnailConfig] = Field(
        None,
        alias='ThumbnailConfig',
        description='The <code>PipelineOutputConfig</code> structure.',
    )


class Field20120925PipelinesIdPutRequest(BaseModel):
    AwsKmsKeyArn: Optional[constr(min_length=0, max_length=255)] = Field(
        None,
        description="<p>The AWS Key Management Service (AWS KMS) key that you want to use with this pipeline.</p> <p>If you use either <code>s3</code> or <code>s3-aws-kms</code> as your <code>Encryption:Mode</code>, you don't need to provide a key with your job because a default key, known as an AWS-KMS key, is created for you automatically. You need to provide an AWS-KMS key only if you want to use a non-default AWS-KMS key, or if you are using an <code>Encryption:Mode</code> of <code>aes-cbc-pkcs7</code>, <code>aes-ctr</code>, or <code>aes-gcm</code>.</p>",
    )
    ContentConfig_1: Optional[ContentConfig] = Field(
        None,
        alias='ContentConfig',
        description='The <code>PipelineOutputConfig</code> structure.',
    )
    InputBucket: Optional[constr(pattern=r'^(\w|\.|-){1,255}$')] = Field(
        None,
        description='The Amazon S3 bucket in which you saved the media files that you want to transcode and the graphics that you want to use as watermarks.',
    )
    Name: Optional[constr(min_length=1, max_length=40)] = Field(
        None,
        description='<p>The name of the pipeline. We recommend that the name be unique within the AWS account, but uniqueness is not enforced.</p> <p>Constraints: Maximum 40 characters</p>',
    )
    Notifications_1: Optional[Notifications] = Field(
        None,
        alias='Notifications',
        description='<p>The Amazon Simple Notification Service (Amazon SNS) topic or topics to notify in order to report job status.</p> <important> <p>To receive notifications, you must also subscribe to the new topic in the Amazon SNS console.</p> </important>',
    )
    Role: Optional[constr(pattern=r'^arn:aws:iam::\w{12}:role/.+$')] = Field(
        None,
        description='The IAM Amazon Resource Name (ARN) for the role that you want Elastic Transcoder to use to transcode jobs for this pipeline.',
    )
    ThumbnailConfig_1: Optional[ThumbnailConfig] = Field(
        None,
        alias='ThumbnailConfig',
        description='The <code>PipelineOutputConfig</code> structure.',
    )


class Field20120925PipelinesIdNotificationsPostRequest(BaseModel):
    Notifications_1: Notifications = Field(
        ...,
        alias='Notifications',
        description='<p>The Amazon Simple Notification Service (Amazon SNS) topic or topics to notify in order to report job status.</p> <important> <p>To receive notifications, you must also subscribe to the new topic in the Amazon SNS console.</p> </important>',
    )


class Field20120925PipelinesIdStatusPostRequest(BaseModel):
    Status: constr(pattern=r'(^Active$)|(^Paused$)') = Field(
        ...,
        description='<p>The desired status of the pipeline:</p> <ul> <li> <p> <code>Active</code>: The pipeline is processing jobs.</p> </li> <li> <p> <code>Paused</code>: The pipeline is not currently processing jobs.</p> </li> </ul>',
    )


class Field20120925RoleTestsPostRequest(BaseModel):
    InputBucket: constr(pattern=r'^(\w|\.|-){1,255}$') = Field(
        ...,
        description='The Amazon S3 bucket that contains media files to be transcoded. The action attempts to read from this bucket.',
    )
    OutputBucket: constr(pattern=r'^(\w|\.|-){1,255}$') = Field(
        ...,
        description='The Amazon S3 bucket that Elastic Transcoder writes transcoded media files to. The action attempts to read from this bucket.',
    )
    Role: constr(pattern=r'^arn:aws:iam::\w{12}:role/.+$') = Field(
        ...,
        description='The IAM Amazon Resource Name (ARN) for the role that you want Elastic Transcoder to test.',
    )
    Topics: List[SnsTopic] = Field(
        ...,
        description='The ARNs of one or more Amazon Simple Notification Service (Amazon SNS) topics that you want the action to send a test notification to.',
        max_length=30,
    )


class AudioCodecOptions(BaseModel):
    BitDepth: Optional[AudioBitDepth] = None
    BitOrder: Optional[AudioBitOrder] = None
    Profile: Optional[AudioCodecProfile] = None
    Signed: Optional[AudioSigned] = None


class AudioParameters(BaseModel):
    AudioPackingMode_1: Optional[AudioPackingMode] = Field(
        None, alias='AudioPackingMode'
    )
    BitRate: Optional[AudioBitRate] = None
    Channels: Optional[AudioChannels] = None
    Codec: Optional[AudioCodec] = None
    CodecOptions: Optional[AudioCodecOptions] = None
    SampleRate: Optional[AudioSampleRate] = None


class Clip(BaseModel):
    TimeSpan_1: Optional[TimeSpan] = Field(None, alias='TimeSpan')


class Composition(RootModel[List[Clip]]):
    root: List[Clip]


class DetectedProperties(BaseModel):
    DurationMillis: Optional[NullableLong] = None
    FileSize: Optional[NullableLong] = None
    FrameRate: Optional[FloatString] = None
    Height: Optional[NullableInteger] = None
    Width: Optional[NullableInteger] = None


class Encryption(BaseModel):
    InitializationVector: Optional[ZeroTo255String] = None
    Key: Optional[Base64EncodedString] = None
    KeyMd5: Optional[Base64EncodedString] = None
    Mode: Optional[EncryptionMode] = None


class ExceptionMessages(RootModel[List[String]]):
    root: List[String]


class HlsContentProtection(BaseModel):
    InitializationVector: Optional[ZeroTo255String] = None
    Key: Optional[Base64EncodedString] = None
    KeyMd5: Optional[Base64EncodedString] = None
    KeyStoragePolicy_1: Optional[KeyStoragePolicy] = Field(
        None, alias='KeyStoragePolicy'
    )
    LicenseAcquisitionUrl: Optional[ZeroTo512String] = None
    Method: Optional[HlsContentProtectionMethod] = None


class JobWatermark(BaseModel):
    Encryption_1: Optional[Encryption] = Field(None, alias='Encryption')
    InputKey: Optional[WatermarkKey] = None
    PresetWatermarkId_1: Optional[PresetWatermarkId] = Field(
        None, alias='PresetWatermarkId'
    )


class JobWatermarks(RootModel[List[JobWatermark]]):
    root: List[JobWatermark]


class PipelineOutputConfig(BaseModel):
    Bucket: Optional[BucketName] = None
    Permissions_1: Optional[Permissions] = Field(None, alias='Permissions')
    StorageClass_1: Optional[StorageClass] = Field(None, alias='StorageClass')


class PlayReadyDrm(BaseModel):
    Format: Optional[PlayReadyDrmFormatString] = None
    InitializationVector: Optional[ZeroTo255String] = None
    Key: Optional[NonEmptyBase64EncodedString] = None
    KeyId: Optional[KeyIdGuid] = None
    KeyMd5: Optional[NonEmptyBase64EncodedString] = None
    LicenseAcquisitionUrl: Optional[OneTo512String] = None


class Playlist(BaseModel):
    Format: Optional[PlaylistFormat] = None
    HlsContentProtection_1: Optional[HlsContentProtection] = Field(
        None, alias='HlsContentProtection'
    )
    Name: Optional[Filename] = None
    OutputKeys_1: Optional[OutputKeys] = Field(None, alias='OutputKeys')
    PlayReadyDrm_1: Optional[PlayReadyDrm] = Field(None, alias='PlayReadyDrm')
    Status: Optional[JobStatus] = None
    StatusDetail: Optional[Description] = None


class Playlists(RootModel[List[Playlist]]):
    root: List[Playlist]


class PresetWatermark(BaseModel):
    HorizontalAlign_1: Optional[HorizontalAlign] = Field(None, alias='HorizontalAlign')
    HorizontalOffset: Optional[PixelsOrPercent] = None
    Id: Optional[PresetWatermarkId] = None
    MaxHeight: Optional[PixelsOrPercent] = None
    MaxWidth: Optional[PixelsOrPercent] = None
    Opacity_1: Optional[Opacity] = Field(None, alias='Opacity')
    SizingPolicy: Optional[WatermarkSizingPolicy] = None
    Target_1: Optional[Target] = Field(None, alias='Target')
    VerticalAlign_1: Optional[VerticalAlign] = Field(None, alias='VerticalAlign')
    VerticalOffset: Optional[PixelsOrPercent] = None


class PresetWatermarks(RootModel[List[PresetWatermark]]):
    root: List[PresetWatermark]


class TestRoleResponse(BaseModel):
    Messages: Optional[ExceptionMessages] = None
    Success_1: Optional[Success] = Field(None, alias='Success')


class UpdatePipelineNotificationsRequest(BaseModel):
    Notifications_1: Notifications = Field(..., alias='Notifications')


class UpdatePipelineRequest(BaseModel):
    AwsKmsKeyArn: Optional[KeyArn] = None
    ContentConfig: Optional[PipelineOutputConfig] = None
    InputBucket: Optional[BucketName] = None
    Name_1: Optional[Name] = Field(None, alias='Name')
    Notifications_1: Optional[Notifications] = Field(None, alias='Notifications')
    Role_1: Optional[Role] = Field(None, alias='Role')
    ThumbnailConfig: Optional[PipelineOutputConfig] = None


class VideoParameters(BaseModel):
    AspectRatio_1: Optional[AspectRatio] = Field(None, alias='AspectRatio')
    BitRate: Optional[VideoBitRate] = None
    Codec: Optional[VideoCodec] = None
    CodecOptions_1: Optional[CodecOptions] = Field(None, alias='CodecOptions')
    DisplayAspectRatio: Optional[AspectRatio] = None
    FixedGOP_1: Optional[FixedGOP] = Field(None, alias='FixedGOP')
    FrameRate_1: Optional[FrameRate] = Field(None, alias='FrameRate')
    KeyframesMaxDist_1: Optional[KeyframesMaxDist] = Field(
        None, alias='KeyframesMaxDist'
    )
    MaxFrameRate_1: Optional[MaxFrameRate] = Field(None, alias='MaxFrameRate')
    MaxHeight: Optional[DigitsOrAuto] = None
    MaxWidth: Optional[DigitsOrAuto] = None
    PaddingPolicy_1: Optional[PaddingPolicy] = Field(None, alias='PaddingPolicy')
    Resolution_1: Optional[Resolution] = Field(None, alias='Resolution')
    SizingPolicy_1: Optional[SizingPolicy] = Field(None, alias='SizingPolicy')
    Watermarks: Optional[PresetWatermarks] = None


class Audio(BaseModel):
    AudioPackingMode_1: Optional[AudioPackingMode] = Field(
        None, alias='AudioPackingMode'
    )
    BitRate: Optional[AudioBitRate] = None
    Channels: Optional[AudioChannels] = None
    Codec: Optional[AudioCodec] = None
    CodecOptions: Optional[AudioCodecOptions] = None
    SampleRate: Optional[AudioSampleRate] = None


class Video(BaseModel):
    AspectRatio_1: Optional[AspectRatio] = Field(None, alias='AspectRatio')
    BitRate: Optional[VideoBitRate] = None
    Codec: Optional[VideoCodec] = None
    CodecOptions_1: Optional[CodecOptions] = Field(None, alias='CodecOptions')
    DisplayAspectRatio: Optional[AspectRatio] = None
    FixedGOP_1: Optional[FixedGOP] = Field(None, alias='FixedGOP')
    FrameRate_1: Optional[FrameRate] = Field(None, alias='FrameRate')
    KeyframesMaxDist_1: Optional[KeyframesMaxDist] = Field(
        None, alias='KeyframesMaxDist'
    )
    MaxFrameRate_1: Optional[MaxFrameRate] = Field(None, alias='MaxFrameRate')
    MaxHeight: Optional[DigitsOrAuto] = None
    MaxWidth: Optional[DigitsOrAuto] = None
    PaddingPolicy_1: Optional[PaddingPolicy] = Field(None, alias='PaddingPolicy')
    Resolution_1: Optional[Resolution] = Field(None, alias='Resolution')
    SizingPolicy_1: Optional[SizingPolicy] = Field(None, alias='SizingPolicy')
    Watermarks: Optional[PresetWatermarks] = None


class Field20120925PresetsPostRequest(BaseModel):
    Audio_1: Optional[Audio] = Field(
        None, alias='Audio', description='Parameters required for transcoding audio.'
    )
    Container: constr(
        pattern=r'(^mp4$)|(^ts$)|(^webm$)|(^mp3$)|(^flac$)|(^oga$)|(^ogg$)|(^fmp4$)|(^mpg$)|(^flv$)|(^gif$)|(^mxf$)|(^wav$)|(^mp2$)'
    ) = Field(
        ...,
        description='The container type for the output file. Valid values include <code>flac</code>, <code>flv</code>, <code>fmp4</code>, <code>gif</code>, <code>mp3</code>, <code>mp4</code>, <code>mpg</code>, <code>mxf</code>, <code>oga</code>, <code>ogg</code>, <code>ts</code>, and <code>webm</code>.',
    )
    Description: Optional[constr(min_length=0, max_length=255)] = Field(
        None, description='A description of the preset.'
    )
    Name: constr(min_length=1, max_length=40) = Field(
        ...,
        description='The name of the preset. We recommend that the name be unique within the AWS account, but uniqueness is not enforced.',
    )
    Thumbnails_1: Optional[Thumbnails] = Field(
        None, alias='Thumbnails', description='Thumbnails for videos.'
    )
    Video_1: Optional[Video] = Field(
        None, alias='Video', description='The <code>VideoParameters</code> structure.'
    )


class Artwork(BaseModel):
    AlbumArtFormat: Optional[JpgOrPng] = None
    Encryption_1: Optional[Encryption] = Field(None, alias='Encryption')
    InputKey: Optional[WatermarkKey] = None
    MaxHeight: Optional[DigitsOrAuto] = None
    MaxWidth: Optional[DigitsOrAuto] = None
    PaddingPolicy_1: Optional[PaddingPolicy] = Field(None, alias='PaddingPolicy')
    SizingPolicy_1: Optional[SizingPolicy] = Field(None, alias='SizingPolicy')


class Artworks(RootModel[List[Artwork]]):
    root: List[Artwork]


class CaptionFormat(BaseModel):
    Encryption_1: Optional[Encryption] = Field(None, alias='Encryption')
    Format: Optional[CaptionFormatFormat] = None
    Pattern: Optional[CaptionFormatPattern] = None


class CaptionFormats(RootModel[List[CaptionFormat]]):
    root: List[CaptionFormat] = Field(..., max_length=4)


class CaptionSource(BaseModel):
    Encryption_1: Optional[Encryption] = Field(None, alias='Encryption')
    Key: Optional[LongKey] = None
    Label: Optional[Name] = None
    Language: Optional[Key] = None
    TimeOffset_1: Optional[TimeOffset] = Field(None, alias='TimeOffset')


class CaptionSources(RootModel[List[CaptionSource]]):
    root: List[CaptionSource] = Field(..., max_length=20)


class Captions(BaseModel):
    CaptionFormats_1: Optional[CaptionFormats] = Field(None, alias='CaptionFormats')
    CaptionSources_1: Optional[CaptionSources] = Field(None, alias='CaptionSources')
    MergePolicy: Optional[CaptionMergePolicy] = None


class CreateJobPlaylist(BaseModel):
    Format: Optional[PlaylistFormat] = None
    HlsContentProtection_1: Optional[HlsContentProtection] = Field(
        None, alias='HlsContentProtection'
    )
    Name: Optional[Filename] = None
    OutputKeys_1: Optional[OutputKeys] = Field(None, alias='OutputKeys')
    PlayReadyDrm_1: Optional[PlayReadyDrm] = Field(None, alias='PlayReadyDrm')


class CreateJobPlaylists(RootModel[List[CreateJobPlaylist]]):
    root: List[CreateJobPlaylist] = Field(..., max_length=30)


class CreatePipelineRequest(BaseModel):
    AwsKmsKeyArn: Optional[KeyArn] = None
    ContentConfig: Optional[PipelineOutputConfig] = None
    InputBucket: BucketName
    Name_1: Name = Field(..., alias='Name')
    Notifications_1: Optional[Notifications] = Field(None, alias='Notifications')
    OutputBucket: Optional[BucketName] = None
    Role_1: Role = Field(..., alias='Role')
    ThumbnailConfig: Optional[PipelineOutputConfig] = None


class CreatePresetRequest(BaseModel):
    Audio: Optional[AudioParameters] = None
    Container: PresetContainer
    Description_1: Optional[Description] = Field(None, alias='Description')
    Name_1: Name = Field(..., alias='Name')
    Thumbnails_1: Optional[Thumbnails] = Field(None, alias='Thumbnails')
    Video: Optional[VideoParameters] = None


class InputCaptions(BaseModel):
    CaptionSources_1: Optional[CaptionSources] = Field(None, alias='CaptionSources')
    MergePolicy: Optional[CaptionMergePolicy] = None


class JobAlbumArt(BaseModel):
    Artwork: Optional[Artworks] = None
    MergePolicy_1: Optional[MergePolicy] = Field(None, alias='MergePolicy')


class JobInput(BaseModel):
    AspectRatio_1: Optional[AspectRatio] = Field(None, alias='AspectRatio')
    Container: Optional[JobContainer] = None
    DetectedProperties_1: Optional[DetectedProperties] = Field(
        None, alias='DetectedProperties'
    )
    Encryption_1: Optional[Encryption] = Field(None, alias='Encryption')
    FrameRate_1: Optional[FrameRate] = Field(None, alias='FrameRate')
    InputCaptions_1: Optional[InputCaptions] = Field(None, alias='InputCaptions')
    Interlaced_1: Optional[Interlaced] = Field(None, alias='Interlaced')
    Key: Optional[LongKey] = None
    Resolution_1: Optional[Resolution] = Field(None, alias='Resolution')
    TimeSpan_1: Optional[TimeSpan] = Field(None, alias='TimeSpan')


class JobInputs(RootModel[List[JobInput]]):
    root: List[JobInput] = Field(..., max_length=200)


class JobOutput(BaseModel):
    AlbumArt: Optional[JobAlbumArt] = None
    AppliedColorSpaceConversion: Optional[String] = None
    Captions_1: Optional[Captions] = Field(None, alias='Captions')
    Composition_1: Optional[Composition] = Field(None, alias='Composition')
    Duration: Optional[NullableLong] = None
    DurationMillis: Optional[NullableLong] = None
    Encryption_1: Optional[Encryption] = Field(None, alias='Encryption')
    FileSize: Optional[NullableLong] = None
    FrameRate: Optional[FloatString] = None
    Height: Optional[NullableInteger] = None
    Id: Optional[String] = None
    Key_1: Optional[Key] = Field(None, alias='Key')
    PresetId: Optional[Id] = None
    Rotate_1: Optional[Rotate] = Field(None, alias='Rotate')
    SegmentDuration: Optional[FloatString] = None
    Status: Optional[JobStatus] = None
    StatusDetail: Optional[Description] = None
    ThumbnailEncryption: Optional[Encryption] = None
    ThumbnailPattern_1: Optional[ThumbnailPattern] = Field(
        None, alias='ThumbnailPattern'
    )
    Watermarks: Optional[JobWatermarks] = None
    Width: Optional[NullableInteger] = None


class JobOutputs(RootModel[List[JobOutput]]):
    root: List[JobOutput]


class Pipeline(BaseModel):
    Arn: Optional[String] = None
    AwsKmsKeyArn: Optional[KeyArn] = None
    ContentConfig: Optional[PipelineOutputConfig] = None
    Id_1: Optional[Id] = Field(None, alias='Id')
    InputBucket: Optional[BucketName] = None
    Name_1: Optional[Name] = Field(None, alias='Name')
    Notifications_1: Optional[Notifications] = Field(None, alias='Notifications')
    OutputBucket: Optional[BucketName] = None
    Role_1: Optional[Role] = Field(None, alias='Role')
    Status: Optional[PipelineStatus] = None
    ThumbnailConfig: Optional[PipelineOutputConfig] = None


class Pipelines(RootModel[List[Pipeline]]):
    root: List[Pipeline]


class Preset(BaseModel):
    Arn: Optional[String] = None
    Audio: Optional[AudioParameters] = None
    Container: Optional[PresetContainer] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    Id_1: Optional[Id] = Field(None, alias='Id')
    Name_1: Optional[Name] = Field(None, alias='Name')
    Thumbnails_1: Optional[Thumbnails] = Field(None, alias='Thumbnails')
    Type: Optional[PresetType] = None
    Video: Optional[VideoParameters] = None


class Presets(RootModel[List[Preset]]):
    root: List[Preset]


class ReadPipelineResponse(BaseModel):
    Pipeline_1: Optional[Pipeline] = Field(None, alias='Pipeline')
    Warnings_1: Optional[Warnings] = Field(None, alias='Warnings')


class ReadPresetResponse(BaseModel):
    Preset_1: Optional[Preset] = Field(None, alias='Preset')


class UpdatePipelineNotificationsResponse(BaseModel):
    Pipeline_1: Optional[Pipeline] = Field(None, alias='Pipeline')


class UpdatePipelineResponse(BaseModel):
    Pipeline_1: Optional[Pipeline] = Field(None, alias='Pipeline')
    Warnings_1: Optional[Warnings] = Field(None, alias='Warnings')


class UpdatePipelineStatusResponse(BaseModel):
    Pipeline_1: Optional[Pipeline] = Field(None, alias='Pipeline')


class Input(BaseModel):
    AspectRatio_1: Optional[AspectRatio] = Field(None, alias='AspectRatio')
    Container: Optional[JobContainer] = None
    DetectedProperties_1: Optional[DetectedProperties] = Field(
        None, alias='DetectedProperties'
    )
    Encryption_1: Optional[Encryption] = Field(None, alias='Encryption')
    FrameRate_1: Optional[FrameRate] = Field(None, alias='FrameRate')
    InputCaptions_1: Optional[InputCaptions] = Field(None, alias='InputCaptions')
    Interlaced_1: Optional[Interlaced] = Field(None, alias='Interlaced')
    Key: Optional[LongKey] = None
    Resolution_1: Optional[Resolution] = Field(None, alias='Resolution')
    TimeSpan_1: Optional[TimeSpan] = Field(None, alias='TimeSpan')


class Output(BaseModel):
    AlbumArt: Optional[JobAlbumArt] = None
    Captions_1: Optional[Captions] = Field(None, alias='Captions')
    Composition_1: Optional[Composition] = Field(None, alias='Composition')
    Encryption_1: Optional[Encryption] = Field(None, alias='Encryption')
    Key_1: Optional[Key] = Field(None, alias='Key')
    PresetId: Optional[Id] = None
    Rotate_1: Optional[Rotate] = Field(None, alias='Rotate')
    SegmentDuration: Optional[FloatString] = None
    ThumbnailEncryption: Optional[Encryption] = None
    ThumbnailPattern_1: Optional[ThumbnailPattern] = Field(
        None, alias='ThumbnailPattern'
    )
    Watermarks: Optional[JobWatermarks] = None


class CreateJobOutput(BaseModel):
    AlbumArt: Optional[JobAlbumArt] = None
    Captions_1: Optional[Captions] = Field(None, alias='Captions')
    Composition_1: Optional[Composition] = Field(None, alias='Composition')
    Encryption_1: Optional[Encryption] = Field(None, alias='Encryption')
    Key_1: Optional[Key] = Field(None, alias='Key')
    PresetId: Optional[Id] = None
    Rotate_1: Optional[Rotate] = Field(None, alias='Rotate')
    SegmentDuration: Optional[FloatString] = None
    ThumbnailEncryption: Optional[Encryption] = None
    ThumbnailPattern_1: Optional[ThumbnailPattern] = Field(
        None, alias='ThumbnailPattern'
    )
    Watermarks: Optional[JobWatermarks] = None


class CreateJobOutputs(RootModel[List[CreateJobOutput]]):
    root: List[CreateJobOutput] = Field(..., max_length=30)


class CreateJobRequest(BaseModel):
    Input: Optional[JobInput] = None
    Inputs: Optional[JobInputs] = None
    Output: Optional[CreateJobOutput] = None
    OutputKeyPrefix: Optional[Key] = None
    Outputs: Optional[CreateJobOutputs] = None
    PipelineId: Id
    Playlists: Optional[CreateJobPlaylists] = None
    UserMetadata_1: Optional[UserMetadata] = Field(None, alias='UserMetadata')


class CreatePipelineResponse(BaseModel):
    Pipeline_1: Optional[Pipeline] = Field(None, alias='Pipeline')
    Warnings_1: Optional[Warnings] = Field(None, alias='Warnings')


class CreatePresetResponse(BaseModel):
    Preset_1: Optional[Preset] = Field(None, alias='Preset')
    Warning: Optional[String] = None


class Job(BaseModel):
    Arn: Optional[String] = None
    Id_1: Optional[Id] = Field(None, alias='Id')
    Input: Optional[JobInput] = None
    Inputs: Optional[JobInputs] = None
    Output: Optional[JobOutput] = None
    OutputKeyPrefix: Optional[Key] = None
    Outputs: Optional[JobOutputs] = None
    PipelineId: Optional[Id] = None
    Playlists_1: Optional[Playlists] = Field(None, alias='Playlists')
    Status: Optional[JobStatus] = None
    Timing_1: Optional[Timing] = Field(None, alias='Timing')
    UserMetadata_1: Optional[UserMetadata] = Field(None, alias='UserMetadata')


class Jobs(RootModel[List[Job]]):
    root: List[Job]


class ListJobsByPipelineResponse(BaseModel):
    Jobs_1: Optional[Jobs] = Field(None, alias='Jobs')
    NextPageToken: Optional[Id] = None


class ListJobsByStatusResponse(BaseModel):
    Jobs_1: Optional[Jobs] = Field(None, alias='Jobs')
    NextPageToken: Optional[Id] = None


class ListPipelinesResponse(BaseModel):
    NextPageToken: Optional[Id] = None
    Pipelines_1: Optional[Pipelines] = Field(None, alias='Pipelines')


class ListPresetsResponse(BaseModel):
    NextPageToken: Optional[Id] = None
    Presets_1: Optional[Presets] = Field(None, alias='Presets')


class ReadJobResponse(BaseModel):
    Job_1: Optional[Job] = Field(None, alias='Job')


class Field20120925JobsPostRequest(BaseModel):
    Input_1: Optional[Input] = Field(
        None,
        alias='Input',
        description="Information about the file that you're transcoding.",
    )
    Inputs: Optional[List[JobInput]] = Field(
        None,
        description='A section of the request body that provides information about the files that are being transcoded.',
        max_length=200,
    )
    Output_1: Optional[Output] = Field(
        None, alias='Output', description='The <code>CreateJobOutput</code> structure.'
    )
    OutputKeyPrefix: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description='The value, if any, that you want Elastic Transcoder to prepend to the names of all files that this job creates, including output files, thumbnails, and playlists.',
    )
    Outputs: Optional[List[CreateJobOutput]] = Field(
        None,
        description=' A section of the request body that provides information about the transcoded (target) files. We recommend that you use the <code>Outputs</code> syntax instead of the <code>Output</code> syntax. ',
        max_length=30,
    )
    PipelineId: constr(pattern=r'^\d{13}-\w{6}$') = Field(
        ...,
        description='The <code>Id</code> of the pipeline that you want Elastic Transcoder to use for transcoding. The pipeline determines several settings, including the Amazon S3 bucket from which Elastic Transcoder gets the files to transcode and the bucket into which Elastic Transcoder puts the transcoded files.',
    )
    Playlists: Optional[List[CreateJobPlaylist]] = Field(
        None,
        description='<p>If you specify a preset in <code>PresetId</code> for which the value of <code>Container</code> is fmp4 (Fragmented MP4) or ts (MPEG-TS), Playlists contains information about the master playlists that you want Elastic Transcoder to create.</p> <p>The maximum number of master playlists in a job is 30.</p>',
        max_length=30,
    )
    UserMetadata: Optional[Dict[str, String]] = Field(
        None,
        description='User-defined metadata that you want to associate with an Elastic Transcoder job. You specify metadata in <code>key/value</code> pairs, and you can add up to 10 <code>key/value</code> pairs per job. Elastic Transcoder does not guarantee that <code>key/value</code> pairs are returned in the same order in which you specify them.',
    )


class CreateJobResponse(BaseModel):
    Job_1: Optional[Job] = Field(None, alias='Job')
